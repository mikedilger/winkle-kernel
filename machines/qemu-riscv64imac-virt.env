# QEMU riscv64 imac virt

# Clear any previous env values
unset $(compgen -v | grep CARGO_)

export CARGO_BUILD_TARGET="./machines/riscv64imac-unknown-winklekernel-elf.json"
export CARGO_UNSTABLE_BUILD_STD="core compiler_builtins"
export CARGO_UNSTABLE_BUILD_STD_FEATURES="compiler-builtins-mem"
export CARGO_BUILD_RUSTFLAGS='--cfg machine="qemu-riscv64-virt" -Clink-args=-Tsrc/target/machine/sifive_hifive_unmatched/link.lds'
export CARGO_BUILD_RUSTDOCFLAGS=$CARGO_BUILD_RUSTFLAGS

# -machine virt      RISC-V board compatible with SiFive U SDK
#                    'sifive_u' is more accurate, however it does not emulate a full machine.
#                    So we use 'virt' which allows VirtIO devices.
# -cpu rv64          Generic riscv64 machine
# -smp 4             It has four CPUs (we don't count the real-time S76 monitor CPU)
# -m 2G              The machine actually as 16 GB, but if we emulated that much it would
#                    hog our host machine memory, and we aren't using much for the OS yet.
# -serial mon:stdio  Send the serial to the hosts standard output, BUT multiplex it too
# -bios none         We have no bios
# -kernel            The final parameter will be the name of the kernel.  We need the
#                    trailing space.
export CARGO_TARGET_RISCV64IMAC_UNKNOWN_WINKLEKERNEL_ELF_RUNNER="qemu-system-riscv64 -machine virt -cpu rv64 -smp 4 -m 2G -serial mon:stdio -bios none -kernel "
